import numpy as npimport pandas as pdfrom pathlib import Pathfrom netCDF4 import Datasetfrom multiprocessing import Poolfrom myprojects.functions import merge_filesimport matplotlibmatplotlib.use("TkAgg")import matplotlib.pyplot as pltfrom mpl_toolkits.basemap import Basemapfrom matplotlib.ticker import FormatStrFormatterdef plot_figure(img, lons, lats,                llcrnrlat=-58.,                urcrnrlat=78.,                llcrnrlon=-172.,                urcrnrlon=180.,                cbrange=(0,1),                cmap='jet',                plot_cmap=True,                title='',                fontsize=12):    m = Basemap(projection='mill',                    llcrnrlat=llcrnrlat,                    urcrnrlat=urcrnrlat,                    llcrnrlon=llcrnrlon,                    urcrnrlon=urcrnrlon,                    resolution='c')    m.drawcoastlines()    m.drawcountries()    m.drawstates()    im = m.pcolormesh(lons, lats, img, cmap=cmap, latlon=True)    im.set_clim(vmin=cbrange[0], vmax=cbrange[1])    x, y = m(-163, -52)    plt.text(x, y, title, fontsize=fontsize)    return imdef plot_coverage():    params = [(m,v) for v in ['v02.2', 'v03.3', 'v04.4'] for m in ['PASSIVE','COMBINED']]    base = '/work/ESA_CCI_SM/n_valid_per_gpi/'    arrs = [np.load(base + '_'.join(p) + '.npy') for p in params]    lons = (np.arange(360 * 4) * 0.25) - 179.875    lats = (np.arange(180 * 4) * 0.25) - 89.875    lons, lats = np.meshgrid(lons, lats)    figsize = (14,10)    fontsize = 14    f = plt.figure(figsize=figsize)    for i, (p, a) in enumerate(zip(params, arrs)):        plt.subplot(3,2,i+1)        img_masked = np.ma.masked_invalid(a)        im = plot_figure(img_masked, lons, lats, plot_cmap=False, fontsize=fontsize, title=p[1])        if i < 2:            plt.title(p[0], fontsize=fontsize)    f.subplots_adjust(wspace=0.01, hspace=0.001, bottom=0.1)    cbar_ax = f.add_axes([0.31, 0.07, 0.4, 0.027])    cb = f.colorbar(im, orientation='horizontal', cax=cbar_ax)    for t in cb.ax.get_xticklabels():        t.set_fontsize(fontsize)    # plt.show()    fout = '/Users/u0116961/Documents/publications/2019_ag_cci_merging/_rev1/images/temporal_coverage.png'    f.savefig(fout, dpi=300, bbox_inches='tight')    plt.close()def plot_contributions():    res = pd.read_csv('/work/ESA_CCI_SM/sensor_contributions/result.csv', index_col=0)    res.index = pd.MultiIndex.from_tuples([tuple(c.split('_')) for c in res.index])    sensors = ['ASCAT', 'AMSR-E', 'WINDSAT', 'SMOS', 'AMSR2']    for s in sensors:        if s == 'ALL':            res.loc[:, s] = res.loc[:, 'n_valid'] / (res.loc[:, 'n_dates'] * res.loc[:, 'n_gpis'])        else:            res.loc[:, s] /= res.loc[:, 'n_valid']    f = plt.figure(figsize=(21, 8))    modes = ['PASSIVE', 'COMBINED']    versions = ['v02.2', 'v03.3', 'v04.4']    periods = ['p1', 'p2', 'p3', 'p4']    titles = ['2007-10-01 - 2010-01-14',              '2010-01-15 - 2011-10-04',              '2011-10-05 - 2012-06-30',              '2012-07-01 - 2014-12-31']    offsets = [-0.45, 0.0, 0.45]    cols = ['firebrick', 'darkorange', 'forestgreen']    fontsize = 16    k = 0    for m in modes:        for p,t in zip(periods, titles):            k += 1            ax = plt.subplot(2, 4, k)            plt.xlim([0,10])            if m == 'PASSIVE':                plt.ylim([0,1.05])                yticks = np.arange(0.0,1.2,0.2)            else:                plt.ylim([0,0.9])                yticks = np.arange(0.0,1.0,0.2)            if m=='PASSIVE':                ax.set_title(t, fontsize=fontsize + 2)                plt.xticks(np.arange(1,11,2), '')            else:                plt.xticks(np.arange(1,11,2), sensors, fontsize=fontsize - 2)            if p=='p1':                plt.ylabel(m, fontsize=fontsize)                plt.yticks(yticks, yticks, fontsize=fontsize - 2 )                ax.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))            else:                plt.yticks(yticks, '')            ax.yaxis.grid(color='k', linestyle='--', linewidth=0.15)            for x in np.arange(2,10,2):                plt.axvline(x, linewidth=0.7, color='k', linestyle='--')            # plt.axvline(0, linewidth=2.5, color='k', linestyle='-')            bars = [None,None,None]            for i, (col, offs, v) in enumerate(zip(cols, offsets, versions)):                for j, s in enumerate(sensors):                    x = 2*j + 1 + offs                    y = res.loc[(m,v,p),s]                    bars[i] = ax.bar(x,y,color=col,width=0.35, alpha=1)            if (m == 'PASSIVE') & (p == 'p4'):                ax.legend(bars, versions, loc='upper left', fontsize=fontsize - 2, framealpha=1)    plt.tight_layout()    fout = '/Users/u0116961/Documents/publications/2019_ag_cci_merging/_rev1/images/sensor_contributions.png'    f.savefig(fout, dpi=300, bbox_inches='tight')    plt.close()    # plt.show()def get_dates(p):    if p == 'p1':        start, end = ('2007-10-01', '2010-01-14')    elif p == 'p2':        start, end = ('2010-01-15', '2011-10-04')    elif p == 'p3':        start, end = ('2011-10-05', '2012-06-30')    else:        start, end = ('2012-07-01', '2014-12-31')    return start, enddef run():    params = [(m,v,p) for m in ['PASSIVE','COMBINED'] for v in ['v02.2', 'v03.3', 'v04.4'] for p in ['p1','p2','p3','p4']]    p = Pool(24)    p.map(calc_contribution, params)    path = Path('/work/ESA_CCI_SM/sensor_contributions/')    merge_files(path, delete=True)    # calc_contribution()    # mode = 'COMBINED'    # version = 'v04.4'    # period = 'p3'def calc_contribution(param):    mode, version, period = param    start, end = get_dates(period)    path = Path('/data_sets/ESA_CCI_SM') / mode / version    files = np.sort(list(path.glob('**/*.nc')))    dates = pd.to_datetime([f.name[-24:-16] for f in files], format='%Y%m%d')    files = files[(dates>=start)&(dates<=end)]    dates = dates[(dates>=start)&(dates<=end)]    mask = Dataset('/data_sets/ESA_CCI_SM/ESA-CCI-SOILMOISTURE-LAND_AND_RAINFOREST_MASK-fv04.2.nc')    n_gpis = mask['land'][:][mask['rainforest'][:]==0].sum()    mask.close()    res = { 'n_gpis': n_gpis,            'n_dates': len(dates),            'n_valid': 0,            'ASCAT': 0,            'AMSR-E': 0,            'WINDSAT':0 ,            'SMOS': 0,            'AMSR2':0}    for i, f in enumerate(files):        print('%i / %i' % (i, len(files)))        ds = Dataset(f)        s = ds['sensor'][0,:,:][ds['flag'][0,:,:].data==0].data        res['n_valid'] += len(s)        if version == 'v02.2':            res['ASCAT'] += np.where((s==6)|(s==10)|(s==17)|(s==18))[0].size            res['AMSR-E'] += np.where((s==4)|(s==10))[0].size            res['WINDSAT'] += np.where((s==11)|(s==17))[0].size            res['AMSR2'] += np.where((s==12)|(s==18))[0].size        else:            res['ASCAT'] += np.where(((s & 256) > 0)|((s & 512) > 0))[0].size            res['AMSR-E'] += np.where((s & 8) > 0)[0].size            res['WINDSAT'] += np.where((s & 16) > 0)[0].size            if version == 'v03.3':                res['AMSR2'] += np.where((s & 32) > 0)[0].size                res['SMOS'] += np.where((s & 64) > 0)[0].size            else:                f = ds['freqbandID'][0,:,:][ds['flag'][0,:,:].data==0].data                res['SMOS'] += np.where((f & 1) > 0)[0].size                if period == 'p4':                    res['AMSR2'] += np.where(((f & 16) > 0)|((f & 32) > 0)|((f & 64) > 0))[0].size    base = '_'.join([mode,version,period])    res = pd.DataFrame(res, index=(base,))    res.to_csv('/work/ESA_CCI_SM/sensor_contributions/'+ base + '.csv')def run2():    params = [(m,v) for v in ['v02.2', 'v03.3', 'v04.4'] for m in ['PASSIVE','COMBINED']]    p = Pool(6)    p.map(calc_contribution_per_gpi, params)    # calc_contribution_per_gpi(params[0])def calc_contribution_per_gpi(param):    mode, version = param    start = get_dates('p1')[0]    end = get_dates('p4')[1]    path = Path('/data_sets/ESA_CCI_SM') / mode / version    files = np.sort(list(path.glob('**/*.nc')))    dates = pd.to_datetime([f.name[-24:-16] for f in files], format='%Y%m%d')    files = files[(dates>=start)&(dates<=end)]    res = np.zeros((720,1440))    for i, f in enumerate(files):        print('%i / %i' % (i, len(files)))        ds = Dataset(f)        res[ds['flag'][0,:,:].data==0] += 1    res = res / len(files)    np.place(res, res == 0, np.nan)    res = np.flipud(res).flatten()    mask = pd.read_csv('/work/_archive/esa_cci_sm/pointlist_Greenland_quarter.csv', index_col=0)    res[mask.index.values] = np.nan    res = res.reshape((720,1440))    fname = '/work/ESA_CCI_SM/n_valid_per_gpi/'+ '_'.join([mode,version])    np.save(fname, res)if __name__=='__main__':    # run()    # run2()    plot_contributions()    # plot_coverage()